function varargout = interface_mat2xls(varargin)
% INTERFACE_MAT2XLS M-file for interface_mat2xls.fig
%      INTERFACE_MAT2XLS, by itself, creates a new INTERFACE_MAT2XLS or raises the existing
%      singleton*.
%
%      H = INTERFACE_MAT2XLS returns the handle to a new INTERFACE_MAT2XLS or the handle to
%      the existing singleton*.
%
%      INTERFACE_MAT2XLS('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in INTERFACE_MAT2XLS.M with the given input arguments.
%
%      INTERFACE_MAT2XLS('Property','Value',...) creates a new INTERFACE_MAT2XLS or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before interface_mat2xls_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to interface_mat2xls_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Copyright 2002-2003 The MathWorks, Inc.

% Edit the above text to modify the response to help interface_mat2xls

% Last Modified by GUIDE v2.5 08-Jun-2007 10:08:07

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @interface_mat2xls_OpeningFcn, ...
                   'gui_OutputFcn',  @interface_mat2xls_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before interface_mat2xls is made visible.
function interface_mat2xls_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to interface_mat2xls (see VARARGIN)

% Choose default command line output for interface_mat2xls
handles.output = hObject;

% Text for Command History
commandtext = 'This program transform NSVA data from *.mat into *.xls! Please browse for a *.mat created by NSVA by pressing on "LOAD". If you are done, press OK.';
set(handles.text1,'String',commandtext);

% initialize handles.path
handles.path = 0;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes interface_mat2xls wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = interface_mat2xls_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in LOAD.
function LOAD_Callback(hObject, eventdata, handles)
% hObject    handle to LOAD (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

[filename, pathname] = uigetfile('*.mat', 'Pick a MAT-file');
if isequal(filename,0)
   % Text for Command History
    commandtext = 'User selected CANCEL. Browse for a MAT-file by pressing on LOAD';
    set(handles.text1,'String',commandtext);
else
   handles.path = fullfile(pathname, filename);
   % Text for Command History
    commandtext = 'Transfer the MAT-file into a XLS-file by pressing on SAVE';
    set(handles.text1,'String',commandtext);
end
guidata(hObject, handles);

% --- Executes on button press in SAVE.
function SAVE_Callback(hObject, eventdata, handles)
% hObject    handle to SAVE (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

if handles.path ~= 0
    [filename, pathname] = uiputfile('*.xls','Transfer MAT-file to');
    if isequal(filename,0) | isequal(pathname,0)
       % Text for Command History
        commandtext = 'User selected CANCEL. Transfer the MAT-file into a XLS-file by pressing on SAVE';
        set(handles.text1,'String',commandtext);
    else
        % Load MAT-file
        load(handles.path);
        
        % Check if MAT-file is created by NSVA
        % list workspace into cell s
        s = who;
        % check if s contains variable NSVA-file
        NSVA_file = 'false';
        [counter,dummy] = size(s);
        for i = 1:counter
            if isequal(s{i},'Activities_Adjusted')
                NSVA_file = 'true';
                break;
            end
        end
        
        % Save results as XLS-file if MAT-file is created by NSVA
        switch NSVA_file
            case 'true'
                handles.Data_Misc.n_Env = size(Fluence_Prior,1); % determine number of environments
                library;    % Read library data: handles.lib
                handles.Data_Misc.n_reactions = size(handles.lib,1);
                for i = 1:handles.Data_Misc.n_Env
                    counter = 1;
                    for j = 1:handles.Data_Misc.n_reactions
                        if isequal(handles.lib(j,:),Included_Reactions{i}(counter,:))
                            handles.Data_Input{i,9}(j) = 1;
                            counter = counter+1;
                            if counter == size(Included_Reactions{i},1)
                                
                        else
                            handles.Data_Input{i,9}(j) = 0;
                        end
                    end
                end             
                save_results_xls;
                % Text for Command History
                commandtext = 'MAT-file has been saved as a XLS-file. Press "SAVE" to save again or press "LOAD" to load another MAT-file.';
                set(handles.text1,'String',commandtext);
            case 'false'
                warndlg('The MAT-file you have choosen is not created by NSVA. LOAD another MAT-file','Wrong Mat-file');
                % Text for Command History
                commandtext = 'SAVE aborted. Browse for a MAT-file by pressing on LOAD';
                set(handles.text1,'String',commandtext);
            otherwise
                'ERROR: Variable NSVA_file is neither true nor false.'
        end
    end
else
    warndlg('A Mat-file has to be loaded first','No Mat-file loaded');
    % Text for Command History
    commandtext = 'Browse for a MAT-file by pressing on LOAD';
    set(handles.text1,'String',commandtext);
end


